//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HappyHour.Core.WS_HappyHour {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Loguin", Namespace="http://schemas.datacontract.org/2004/07/WS_HappyHour")]
    public partial class Loguin : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OndeBeber", Namespace="http://schemas.datacontract.org/2004/07/WS_HappyHour")]
    public partial class OndeBeber : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WS_HappyHour.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/CadastrarUsr", ReplyAction="http://tempuri.org/IService1/CadastrarUsrResponse")]
        System.IAsyncResult BeginCadastrarUsr(string nome, string senha, long nTel, string email, System.AsyncCallback callback, object asyncState);
        
        HappyHour.Core.WS_HappyHour.Loguin EndCadastrarUsr(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SincronizarContatos", ReplyAction="http://tempuri.org/IService1/SincronizarContatosResponse")]
        System.IAsyncResult BeginSincronizarContatos(System.Collections.ObjectModel.ObservableCollection<int> numerosContatos, System.AsyncCallback callback, object asyncState);
        
        bool EndSincronizarContatos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RegistrarOndeBeber", ReplyAction="http://tempuri.org/IService1/RegistrarOndeBeberResponse")]
        System.IAsyncResult BeginRegistrarOndeBeber(string nome, string lat, string lang, System.AsyncCallback callback, object asyncState);
        
        bool EndRegistrarOndeBeber(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RecuperarAmigos", ReplyAction="http://tempuri.org/IService1/RecuperarAmigosResponse")]
        System.IAsyncResult BeginRecuperarAmigos(int nuTel, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndRecuperarAmigos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RecuperarOndeBeber", ReplyAction="http://tempuri.org/IService1/RecuperarOndeBeberResponse")]
        System.IAsyncResult BeginRecuperarOndeBeber(int nuTel, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> EndRecuperarOndeBeber(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : HappyHour.Core.WS_HappyHour.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CadastrarUsrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CadastrarUsrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HappyHour.Core.WS_HappyHour.Loguin Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HappyHour.Core.WS_HappyHour.Loguin)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SincronizarContatosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SincronizarContatosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegistrarOndeBeberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegistrarOndeBeberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecuperarAmigosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecuperarAmigosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecuperarOndeBeberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecuperarOndeBeberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<HappyHour.Core.WS_HappyHour.IService1>, HappyHour.Core.WS_HappyHour.IService1 {
        
        private BeginOperationDelegate onBeginCadastrarUsrDelegate;
        
        private EndOperationDelegate onEndCadastrarUsrDelegate;
        
        private System.Threading.SendOrPostCallback onCadastrarUsrCompletedDelegate;
        
        private BeginOperationDelegate onBeginSincronizarContatosDelegate;
        
        private EndOperationDelegate onEndSincronizarContatosDelegate;
        
        private System.Threading.SendOrPostCallback onSincronizarContatosCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegistrarOndeBeberDelegate;
        
        private EndOperationDelegate onEndRegistrarOndeBeberDelegate;
        
        private System.Threading.SendOrPostCallback onRegistrarOndeBeberCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecuperarAmigosDelegate;
        
        private EndOperationDelegate onEndRecuperarAmigosDelegate;
        
        private System.Threading.SendOrPostCallback onRecuperarAmigosCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecuperarOndeBeberDelegate;
        
        private EndOperationDelegate onEndRecuperarOndeBeberDelegate;
        
        private System.Threading.SendOrPostCallback onRecuperarOndeBeberCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CadastrarUsrCompletedEventArgs> CadastrarUsrCompleted;
        
        public event System.EventHandler<SincronizarContatosCompletedEventArgs> SincronizarContatosCompleted;
        
        public event System.EventHandler<RegistrarOndeBeberCompletedEventArgs> RegistrarOndeBeberCompleted;
        
        public event System.EventHandler<RecuperarAmigosCompletedEventArgs> RecuperarAmigosCompleted;
        
        public event System.EventHandler<RecuperarOndeBeberCompletedEventArgs> RecuperarOndeBeberCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HappyHour.Core.WS_HappyHour.IService1.BeginCadastrarUsr(string nome, string senha, long nTel, string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCadastrarUsr(nome, senha, nTel, email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        HappyHour.Core.WS_HappyHour.Loguin HappyHour.Core.WS_HappyHour.IService1.EndCadastrarUsr(System.IAsyncResult result) {
            return base.Channel.EndCadastrarUsr(result);
        }
        
        private System.IAsyncResult OnBeginCadastrarUsr(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nome = ((string)(inValues[0]));
            string senha = ((string)(inValues[1]));
            long nTel = ((long)(inValues[2]));
            string email = ((string)(inValues[3]));
            return ((HappyHour.Core.WS_HappyHour.IService1)(this)).BeginCadastrarUsr(nome, senha, nTel, email, callback, asyncState);
        }
        
        private object[] OnEndCadastrarUsr(System.IAsyncResult result) {
            HappyHour.Core.WS_HappyHour.Loguin retVal = ((HappyHour.Core.WS_HappyHour.IService1)(this)).EndCadastrarUsr(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCadastrarUsrCompleted(object state) {
            if ((this.CadastrarUsrCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CadastrarUsrCompleted(this, new CadastrarUsrCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CadastrarUsrAsync(string nome, string senha, long nTel, string email) {
            this.CadastrarUsrAsync(nome, senha, nTel, email, null);
        }
        
        public void CadastrarUsrAsync(string nome, string senha, long nTel, string email, object userState) {
            if ((this.onBeginCadastrarUsrDelegate == null)) {
                this.onBeginCadastrarUsrDelegate = new BeginOperationDelegate(this.OnBeginCadastrarUsr);
            }
            if ((this.onEndCadastrarUsrDelegate == null)) {
                this.onEndCadastrarUsrDelegate = new EndOperationDelegate(this.OnEndCadastrarUsr);
            }
            if ((this.onCadastrarUsrCompletedDelegate == null)) {
                this.onCadastrarUsrCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCadastrarUsrCompleted);
            }
            base.InvokeAsync(this.onBeginCadastrarUsrDelegate, new object[] {
                        nome,
                        senha,
                        nTel,
                        email}, this.onEndCadastrarUsrDelegate, this.onCadastrarUsrCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HappyHour.Core.WS_HappyHour.IService1.BeginSincronizarContatos(System.Collections.ObjectModel.ObservableCollection<int> numerosContatos, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSincronizarContatos(numerosContatos, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool HappyHour.Core.WS_HappyHour.IService1.EndSincronizarContatos(System.IAsyncResult result) {
            return base.Channel.EndSincronizarContatos(result);
        }
        
        private System.IAsyncResult OnBeginSincronizarContatos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> numerosContatos = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            return ((HappyHour.Core.WS_HappyHour.IService1)(this)).BeginSincronizarContatos(numerosContatos, callback, asyncState);
        }
        
        private object[] OnEndSincronizarContatos(System.IAsyncResult result) {
            bool retVal = ((HappyHour.Core.WS_HappyHour.IService1)(this)).EndSincronizarContatos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSincronizarContatosCompleted(object state) {
            if ((this.SincronizarContatosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SincronizarContatosCompleted(this, new SincronizarContatosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SincronizarContatosAsync(System.Collections.ObjectModel.ObservableCollection<int> numerosContatos) {
            this.SincronizarContatosAsync(numerosContatos, null);
        }
        
        public void SincronizarContatosAsync(System.Collections.ObjectModel.ObservableCollection<int> numerosContatos, object userState) {
            if ((this.onBeginSincronizarContatosDelegate == null)) {
                this.onBeginSincronizarContatosDelegate = new BeginOperationDelegate(this.OnBeginSincronizarContatos);
            }
            if ((this.onEndSincronizarContatosDelegate == null)) {
                this.onEndSincronizarContatosDelegate = new EndOperationDelegate(this.OnEndSincronizarContatos);
            }
            if ((this.onSincronizarContatosCompletedDelegate == null)) {
                this.onSincronizarContatosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSincronizarContatosCompleted);
            }
            base.InvokeAsync(this.onBeginSincronizarContatosDelegate, new object[] {
                        numerosContatos}, this.onEndSincronizarContatosDelegate, this.onSincronizarContatosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HappyHour.Core.WS_HappyHour.IService1.BeginRegistrarOndeBeber(string nome, string lat, string lang, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegistrarOndeBeber(nome, lat, lang, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool HappyHour.Core.WS_HappyHour.IService1.EndRegistrarOndeBeber(System.IAsyncResult result) {
            return base.Channel.EndRegistrarOndeBeber(result);
        }
        
        private System.IAsyncResult OnBeginRegistrarOndeBeber(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nome = ((string)(inValues[0]));
            string lat = ((string)(inValues[1]));
            string lang = ((string)(inValues[2]));
            return ((HappyHour.Core.WS_HappyHour.IService1)(this)).BeginRegistrarOndeBeber(nome, lat, lang, callback, asyncState);
        }
        
        private object[] OnEndRegistrarOndeBeber(System.IAsyncResult result) {
            bool retVal = ((HappyHour.Core.WS_HappyHour.IService1)(this)).EndRegistrarOndeBeber(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegistrarOndeBeberCompleted(object state) {
            if ((this.RegistrarOndeBeberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegistrarOndeBeberCompleted(this, new RegistrarOndeBeberCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegistrarOndeBeberAsync(string nome, string lat, string lang) {
            this.RegistrarOndeBeberAsync(nome, lat, lang, null);
        }
        
        public void RegistrarOndeBeberAsync(string nome, string lat, string lang, object userState) {
            if ((this.onBeginRegistrarOndeBeberDelegate == null)) {
                this.onBeginRegistrarOndeBeberDelegate = new BeginOperationDelegate(this.OnBeginRegistrarOndeBeber);
            }
            if ((this.onEndRegistrarOndeBeberDelegate == null)) {
                this.onEndRegistrarOndeBeberDelegate = new EndOperationDelegate(this.OnEndRegistrarOndeBeber);
            }
            if ((this.onRegistrarOndeBeberCompletedDelegate == null)) {
                this.onRegistrarOndeBeberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegistrarOndeBeberCompleted);
            }
            base.InvokeAsync(this.onBeginRegistrarOndeBeberDelegate, new object[] {
                        nome,
                        lat,
                        lang}, this.onEndRegistrarOndeBeberDelegate, this.onRegistrarOndeBeberCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HappyHour.Core.WS_HappyHour.IService1.BeginRecuperarAmigos(int nuTel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecuperarAmigos(nuTel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> HappyHour.Core.WS_HappyHour.IService1.EndRecuperarAmigos(System.IAsyncResult result) {
            return base.Channel.EndRecuperarAmigos(result);
        }
        
        private System.IAsyncResult OnBeginRecuperarAmigos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int nuTel = ((int)(inValues[0]));
            return ((HappyHour.Core.WS_HappyHour.IService1)(this)).BeginRecuperarAmigos(nuTel, callback, asyncState);
        }
        
        private object[] OnEndRecuperarAmigos(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((HappyHour.Core.WS_HappyHour.IService1)(this)).EndRecuperarAmigos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecuperarAmigosCompleted(object state) {
            if ((this.RecuperarAmigosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecuperarAmigosCompleted(this, new RecuperarAmigosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecuperarAmigosAsync(int nuTel) {
            this.RecuperarAmigosAsync(nuTel, null);
        }
        
        public void RecuperarAmigosAsync(int nuTel, object userState) {
            if ((this.onBeginRecuperarAmigosDelegate == null)) {
                this.onBeginRecuperarAmigosDelegate = new BeginOperationDelegate(this.OnBeginRecuperarAmigos);
            }
            if ((this.onEndRecuperarAmigosDelegate == null)) {
                this.onEndRecuperarAmigosDelegate = new EndOperationDelegate(this.OnEndRecuperarAmigos);
            }
            if ((this.onRecuperarAmigosCompletedDelegate == null)) {
                this.onRecuperarAmigosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecuperarAmigosCompleted);
            }
            base.InvokeAsync(this.onBeginRecuperarAmigosDelegate, new object[] {
                        nuTel}, this.onEndRecuperarAmigosDelegate, this.onRecuperarAmigosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HappyHour.Core.WS_HappyHour.IService1.BeginRecuperarOndeBeber(int nuTel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecuperarOndeBeber(nuTel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> HappyHour.Core.WS_HappyHour.IService1.EndRecuperarOndeBeber(System.IAsyncResult result) {
            return base.Channel.EndRecuperarOndeBeber(result);
        }
        
        private System.IAsyncResult OnBeginRecuperarOndeBeber(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int nuTel = ((int)(inValues[0]));
            return ((HappyHour.Core.WS_HappyHour.IService1)(this)).BeginRecuperarOndeBeber(nuTel, callback, asyncState);
        }
        
        private object[] OnEndRecuperarOndeBeber(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> retVal = ((HappyHour.Core.WS_HappyHour.IService1)(this)).EndRecuperarOndeBeber(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecuperarOndeBeberCompleted(object state) {
            if ((this.RecuperarOndeBeberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecuperarOndeBeberCompleted(this, new RecuperarOndeBeberCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecuperarOndeBeberAsync(int nuTel) {
            this.RecuperarOndeBeberAsync(nuTel, null);
        }
        
        public void RecuperarOndeBeberAsync(int nuTel, object userState) {
            if ((this.onBeginRecuperarOndeBeberDelegate == null)) {
                this.onBeginRecuperarOndeBeberDelegate = new BeginOperationDelegate(this.OnBeginRecuperarOndeBeber);
            }
            if ((this.onEndRecuperarOndeBeberDelegate == null)) {
                this.onEndRecuperarOndeBeberDelegate = new EndOperationDelegate(this.OnEndRecuperarOndeBeber);
            }
            if ((this.onRecuperarOndeBeberCompletedDelegate == null)) {
                this.onRecuperarOndeBeberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecuperarOndeBeberCompleted);
            }
            base.InvokeAsync(this.onBeginRecuperarOndeBeberDelegate, new object[] {
                        nuTel}, this.onEndRecuperarOndeBeberDelegate, this.onRecuperarOndeBeberCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override HappyHour.Core.WS_HappyHour.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://happyhourservice.cloudapp.net/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private class Service1ClientChannel : ChannelBase<HappyHour.Core.WS_HappyHour.IService1>, HappyHour.Core.WS_HappyHour.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<HappyHour.Core.WS_HappyHour.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCadastrarUsr(string nome, string senha, long nTel, string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = nome;
                _args[1] = senha;
                _args[2] = nTel;
                _args[3] = email;
                System.IAsyncResult _result = base.BeginInvoke("CadastrarUsr", _args, callback, asyncState);
                return _result;
            }
            
            public HappyHour.Core.WS_HappyHour.Loguin EndCadastrarUsr(System.IAsyncResult result) {
                object[] _args = new object[0];
                HappyHour.Core.WS_HappyHour.Loguin _result = ((HappyHour.Core.WS_HappyHour.Loguin)(base.EndInvoke("CadastrarUsr", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSincronizarContatos(System.Collections.ObjectModel.ObservableCollection<int> numerosContatos, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = numerosContatos;
                System.IAsyncResult _result = base.BeginInvoke("SincronizarContatos", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSincronizarContatos(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SincronizarContatos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegistrarOndeBeber(string nome, string lat, string lang, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = nome;
                _args[1] = lat;
                _args[2] = lang;
                System.IAsyncResult _result = base.BeginInvoke("RegistrarOndeBeber", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegistrarOndeBeber(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RegistrarOndeBeber", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecuperarAmigos(int nuTel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nuTel;
                System.IAsyncResult _result = base.BeginInvoke("RecuperarAmigos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndRecuperarAmigos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("RecuperarAmigos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecuperarOndeBeber(int nuTel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nuTel;
                System.IAsyncResult _result = base.BeginInvoke("RecuperarOndeBeber", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> EndRecuperarOndeBeber(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber> _result = ((System.Collections.ObjectModel.ObservableCollection<HappyHour.Core.WS_HappyHour.OndeBeber>)(base.EndInvoke("RecuperarOndeBeber", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
